<?php

namespace VienasVienas\Bundle\BaseBundle\Entity;

use Doctrine\ORM\EntityRepository;
use VienasVienas\Bundle\BooksBundle\Entity\Book;

/**
 * Order Repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends EntityRepository
{
    /**
     * Method checks is book reserved or not.
     *
     * @param Book $bookId
     *
     * @return bool
     */
    public function isBookReserved(Book $bookId)
    {
        $orders = $this->findByBook($bookId);

        foreach ($orders as $order) {
            if ($order->getStatus() == 'reserved') {
                return true;
            }
        }

        return false;
    }

    /**
     * Method for finding oldest reservation in database.
     *
     * @param Book $bookId
     *
     * @return Order
     */
    public function findByMinReservationDate(Book $bookId)
    {
        $dq = $this->createQueryBuilder('o')
            ->select('o')
            ->where('o.book = :id')
            ->andWhere('o.reservationDate IS NOT NULL')
            ->orderBy('o.reservationDate', 'ASC')
            ->setMaxResults(1)
            ->setParameter('id', $bookId)
            ->getQuery();

        $order = $dq->getSingleResult();

        return $order;
    }

    /**
     * Method for finding expired reservations in database.
     *
     * @param \DateTime $dateTime
     *
     * @return array
     */
    public function findOldReservations(\DateTime $dateTime)
    {
        $time = $dateTime->modify('-24 hours');

        $dq = $this->createQueryBuilder('o')
            ->select('o')
            ->where('o.tokenDate < :time')
            ->andWhere('o.token IS NOT NULL')
            ->orderBy('o.reservationDate', 'ASC')
            ->setParameter('time', $time)
            ->getQuery();

        $orders = $dq->getResult();

        return $orders;
    }

    /**
     * Method for tokens counting.
     *
     * @param Book $book
     *
     * @return int
     */
    public function countTokens(Book $book)
    {
        $dq = $this->createQueryBuilder('o')
            ->select('count(o.token)')
            ->where('o.token IS NOT NULL')
            ->andWhere('o.book = :id')
            ->setParameter('id', $book);
        $count = $dq->getQuery()->getSingleScalarResult();

        return $count;
    }

    /**
     * Function finds latest active order by User.
     *
     * @param User $user
     *
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getLatestActiveBook(User $user)
    {
        $dq = $this->createQueryBuilder('o')
            ->select('o')
            ->where('o.user = :user')
            ->andWhere('o.status = \'active\'')
            ->orderBy('o.pickupDate', 'DESC')
            ->setParameter('user', $user)
            ->setMaxResults(1)
            ->getQuery();

        $order = $dq->getOneOrNullResult();

        return $order;
    }

    /**
     * Function finds latest active reservation by User.
     *
     * @param User $user
     *
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getActiveReservations(User $user)
    {
        $dq = $this->createQueryBuilder('o')
            ->select('o')
            ->where('o.user = :user')
            ->andWhere('o.status = \'reserved\'')
            ->orderBy('o.pickupDate', 'DESC')
            ->setMaxResults(1)
            ->setParameter('user', $user)
            ->getQuery();

        $order = $dq->getOneOrNullResult();

        return $order;
    }
}
